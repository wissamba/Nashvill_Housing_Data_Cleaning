
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
DATA CLEANING PROJECT:


--Standardizing data format
--Standardize the Date format

SELECT *
FROM "NashvilleHousing" nh ;

--I used CAST function because CONVERT did not work

SELECT "SaleDate,"
       CAST ("SaleDate" AS DATE) AS SaleDateConverted
FROM "NashvilleHousing" nh ;


UPDATE "NashvilleHousing"
SET "SaleDate" = CAST ("SaleDate" AS DATE) ;


ALTER TABLE "NashvilleHousing" ADD SaleDateConverted DATE;


UPDATE "NashvilleHousing"
SET SaleDateConverted = CAST ("SaleDate" AS DATE) ;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 --Populate Property Address data

SELECT *
FROM "NashvilleHousing" nh
ORDER BY "ParcelID";


SELECT a."ParcelID",
       b."ParcelID",
       a."PropertyAddress",
       b."PropertyAddress"
FROM "NashvilleHousing" a
JOIN "NashvilleHousing" b ON a."ParcelID"= b."ParcelID"
AND a."UniqueID " <> b."UniqueID "
WHERE a."PropertyAddress" IS NULL;

--Eliminating all NULLS in PropertyAddress

SELECT a."ParcelID",
       a."PropertyAddress",
       b."ParcelID",
       b."PropertyAddress",
       ISNULL (a."PropertyAddress",
               b."PropertyAddress")
FROM "NashvilleHousing" a
JOIN "NashvilleHousing" b ON a."ParcelID"= b."ParcelID"
AND a."UniqueID " <> b."UniqueID "
WHERE a."PropertyAddress" IS NULL
ORDER BY a."ParcelID" ;

--where a."PropertyAddress" is null

UPDATE "NashvilleHousing" a
SET a."PropertyAddress" = ISNULL (a."PropertyAddress",
                                  b."PropertyAddress")
FROM "NashvilleHousing" a
JOIN "NashvilleHousing" b ON a."ParcelID"= b."ParcelID"
AND a."UniqueID " <> b."UniqueID "
WHERE a."PropertyAddress" IS NULL ;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 --Breaking out Address into Individuals Columns( Address, City, State)
 --Instead of using CHARINDEX (it did not work), I used POSITION
 --That was the query of ALEX THE ANALYST
--SELECT
--SUBSTRING("PropertyAddress", 1, CHARINDEX(',',  "PropertyAddress")-1) as Address
--from "NashvilleHousing" nh ;

SELECT "PropertyAddress"
FROM "NashvilleHousing";


SELECT LEFT ("PropertyAddress",
             position(',' in "PropertyAddress")-1) AS ADDRESS,
            substring("PropertyAddress"
                      FROM POSITION (',' in "PropertyAddress") + 1) AS city
FROM "NashvilleHousing" nh ;


ALTER TABLE "NashvilleHousing" ADD "PropertySplitAddress" varchar(255);


UPDATE "NashvilleHousing"
SET "PropertySplitAddress" = LEFT ("PropertyAddress",
                                   position(',' in "PropertyAddress")-1)
ALTER TABLE "NashvilleHousing" ADD "PropertySplitCity" varchar(255);


UPDATE "NashvilleHousing"
SET "PropertySplitCity" = substring("PropertyAddress"
                                    FROM POSITION (',' in "PropertyAddress") + 1)
SELECT *
FROM "NashvilleHousing" nh 


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 --SPLIT THE OwnerAddress in 3 different columns (Address, City, State)
-- I could not use PARSENAME on Postgre SQL

SELECT "OwnerAddress"
FROM "NashvilleHousing";

--For this part, you can use these two queries either (LEFT, SPLIT_APART, and RIGHT)

SELECT LEFT ("OwnerAddress",
             position(',' in "OwnerAddress")-1) AS ADDRESS,
            split_part ("OwnerAddress", ',', 2),
            right("OwnerAddress", 3) AS State
FROM "NashvilleHousing" nh --or SPLIT_APART function for the 3

SELECT split_part("OwnerAddress", ',', 1) AS street,
       split_part ("OwnerAddress", ',', 2) AS city,
       split_part ("OwnerAddress", ',', 3) AS State
FROM "NashvilleHousing" nh --for THOSE WHO HAVE MYSQL you can use parsename


ALTER TABLE "NashvilleHousing" ADD street varchar(255);


UPDATE "NashvilleHousing"
SET "street" = split_part("OwnerAddress", ',', 1)
ALTER TABLE "NashvilleHousing" ADD "city" varchar(255);


UPDATE "NashvilleHousing"
SET "city" = split_part ("OwnerAddress", ',', 2)
ALTER TABLE "NashvilleHousing" ADD state varchar(255);


UPDATE "NashvilleHousing"
SET "state" = split_part ("OwnerAddress", ',', 3)
SELECT *
FROM "NashvilleHousing" 

--------------------------------------------------------------------------------------------------------------------------
 -- Change Y and N to Yes and No in "SoldasVacant" field

SELECT Distinct("SoldAsVacant"),
       Count("SoldAsVacant")
FROM "NashvilleHousing"
GROUP BY "SoldAsVacant"
ORDER BY 2
SELECT "SoldAsVacant",
       CASE
           WHEN "SoldAsVacant" = 'Y' THEN 'Yes'
           WHEN "SoldAsVacant" = 'N' THEN 'No'
           ELSE "SoldAsVacant"
       END
FROM "NashvilleHousing"
UPDATE "NashvilleHousing"
SET "SoldAsVacant" = CASE
                         WHEN "SoldAsVacant" = 'Y' THEN 'Yes'
                         WHEN "SoldAsVacant" = 'N' THEN 'No'
                         ELSE "SoldAsVacant"
                     END 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -- Remove Duplicates

SELECT ("UniqueID "), COUNT (*)
FROM "NashvilleHousing"
GROUP BY "UniqueID "
HAVING COUNT (*) >1
ORDER BY "UniqueID " ;

WITH "row_num_CTE" AS
  (SELECT *,
          ROW_NUMBER() OVER (PARTITION BY "PropertyAddress",
                                          "SalePrice",
                                          "SaleDate",
                                          "LegalReference"
                             ORDER BY "UniqueID ") "row_num"
   FROM "NashvilleHousing")
SELECT*
FROM "row_num_CTE"
WHERE "row_num" > 1 

--------------------------------------------------------------------------------------------------------------------

  SELECT *
  FROM "NashvilleHousing" -- Delete Unused Columns

  SELECT *
  FROM "NashvilleHousing"

  ALTER TABLE "NashvilleHousing"
  DROP COLUMN "PropertyAddress"

  ALTER TABLE "NashvilleHousing"
  DROP COLUMN "OwnerAddress"

  ALTER TABLE "NashvilleHousing"
  DROP COLUMN "SaleDate"

  ALTER TABLE "NashvilleHousing"
  DROP COLUMN "TaxDistrict"

-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
